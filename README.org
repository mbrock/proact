* Proact

  *Proact* is a small JavaScript library that helps you write
  web browser programs in a style that treats interactive
  elements as concurrent threads of execution with passing
  messages through channels.

  There are different ways to program user interfaces.

  It's common to use an event-driven "nested state machine"
  style. Facebook's React library is often used like this.
  The contents of the user interface at any point in time is
  defined by the return value of a rendering function that
  turns an app-defined state structure into an HTML structure.
  Local zones of state are defined by component boundaries
  coded as classes; these have their own render functions and
  their state roots can be updated independently.

  The other common style is an initializing script that
  configures a mess of callbacks that update the HTML document
  in ad hoc ways.

  With Proact, we define what can be thought of as a
  cooperatively concurrent system of nested processes, some of
  which control HTML nodes.  The process functions can
  explicitly wait for events, including receiving events sent
  to them by other processes.

  Failures are propagated through the process hierarchy.
  There are supervising processes that can reset and restart
  their child processes when they fail.  Bugs happen, and if
  the application is split along the seams of the program's
  actual concurrency, we get a natural approach to failure:
  one component crashing leaves the rest of the system running
  while the context surrounding the crash is restarted.

  If you're familiar with Erlang, you can imagine an Erlang
  process hierarchy where some processes are controlling some
  subtree of an HTML document.

** Sequential code

   When writing sequential code, we define computational
   processes as sequences of statements in control structures
   like loops and conditionals, with data flow based on
   assigning to mutable variables.

   This style is accused of serious problems and is seen in
   some circles as a crude legacy, but it's hard to really get
   away from and it currently seems somewhat underappreciated.
   
   Sequential coding is discussed as a necessity of the
   reality of "low-level" Turing-style machines, to be
   transcended through /denotative/ programming based on an
   expression calculus.  This transcendence is a thorny
   research project yielding fascinating fruits, but in
   day-to-day programming, sequential code remains the norm.

   We suspect that sequential programming might be
   fundamentally nice especially for certain "high levels" of
   programming.  User-written scripts are called /scripts/
   because of their straightforward sequentiality.  A shell
   script is a sequence of shell commands: a transcript of a
   user's commands to perform a certain task.

** Interactivity

   Interactive programs have certain challenges compared to
   both sequential scripts and denotative mathematical
   functions.  But these categories are not completely
   distinct.  They are more like aspects that always
   intertwine in real code.

   A user script is necessarily interactive when it interacts
   with disk storage, network protocols, and operating system
   facilities.  These all present sources of /nondeterminism/
   and /interruption/ for the script, even if only in the form
   of unexpected errors.

   A user script may use mathematical expressions that in
   themselves are not interactive but have their input and
   output connected to a system which is interactive overall.

   Some characteristics of interactive programs:
   
     - Most of the time, they are responsive to requests from
       the user, through inputs like buttons, forms, or various
       mouse-based interactions.
       
     - They are also often listening for incoming information
       outside of the user's direct control, from network
       devices or other sensors.
       
     - They can have complex structures of interaction which
       involve guided tutorials, multiplexed documents and tabs,
       overlapping subwindows, bidirectional calculations,
       physical simulations, etc.
       
   
   
